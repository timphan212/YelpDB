/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package yelpdb;

import java.awt.Component;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Tim
 */
public class hw3 extends javax.swing.JFrame {

    /**
     * Creates new form hw3
     */
    public hw3() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        daySelection = new javax.swing.JComboBox();
        fromTime = new javax.swing.JComboBox();
        toTime = new javax.swing.JComboBox();
        attributeSelection = new javax.swing.JComboBox();
        dayText = new javax.swing.JLabel();
        fromText = new javax.swing.JLabel();
        toText = new javax.swing.JLabel();
        attributeText = new javax.swing.JLabel();
        mainCategoriesScroll = new javax.swing.JScrollPane();
        mainCategoriesPanel = new javax.swing.JPanel();
        activeCheckBox = new javax.swing.JCheckBox();
        artsCheckBox = new javax.swing.JCheckBox();
        autoCheckBox = new javax.swing.JCheckBox();
        carCheckBox = new javax.swing.JCheckBox();
        cafesCheckBox = new javax.swing.JCheckBox();
        beautyCheckBox = new javax.swing.JCheckBox();
        convenienceCheckBox = new javax.swing.JCheckBox();
        dentistsCheckBox = new javax.swing.JCheckBox();
        doctorsCheckBox = new javax.swing.JCheckBox();
        drugstoresCheckBox = new javax.swing.JCheckBox();
        departmentCheckBox = new javax.swing.JCheckBox();
        eduCheckBox = new javax.swing.JCheckBox();
        eventCheckBox = new javax.swing.JCheckBox();
        flowersCheckBox = new javax.swing.JCheckBox();
        foodCheckBox = new javax.swing.JCheckBox();
        healthCheckBox = new javax.swing.JCheckBox();
        homeCheckBox = new javax.swing.JCheckBox();
        gardenCheckBox = new javax.swing.JCheckBox();
        hospitalsCheckBox = new javax.swing.JCheckBox();
        hotelsCheckBox = new javax.swing.JCheckBox();
        hardwareCheckBox = new javax.swing.JCheckBox();
        groceryCheckBox = new javax.swing.JCheckBox();
        medicalCheckBox = new javax.swing.JCheckBox();
        nurseriesCheckBox = new javax.swing.JCheckBox();
        nightlifeCheckBox = new javax.swing.JCheckBox();
        restaurantsCheckBox = new javax.swing.JCheckBox();
        shoppingCheckBox = new javax.swing.JCheckBox();
        transportCheckBox = new javax.swing.JCheckBox();
        businessesScrollBar = new javax.swing.JScrollPane();
        businessesTable = new javax.swing.JTable();
        subcategoriesScrollBar = new javax.swing.JScrollPane();
        subcategoriesPanel = new javax.swing.JPanel();
        attributesScrollBar = new javax.swing.JScrollPane();
        attributesPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1100, 675));
        setPreferredSize(new java.awt.Dimension(1200, 675));
        getContentPane().setLayout(null);

        mainPanel.setMinimumSize(new java.awt.Dimension(1080, 618));
        mainPanel.setPreferredSize(new java.awt.Dimension(1080, 618));

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        daySelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No selection", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" }));
        daySelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                daySelectionActionPerformed(evt);
            }
        });

        fromTime.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No selection", "0:00", "1:00", "2:00", "3:00", "4:00", "5:00", "6:00", "7:00", "8:00", "9:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00" }));

        toTime.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No selection", "0:00", "1:00", "2:00", "3:00", "4:00", "5:00", "6:00", "7:00", "8:00", "9:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00" }));

        attributeSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All Attributes", "Any Attributes" }));

        dayText.setText("Day of the week:");

        fromText.setText("From:");

        toText.setText("To:");

        attributeText.setText("Search for:");

        mainCategoriesScroll.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        activeCheckBox.setText("Active Life");
        activeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activeCheckBoxActionPerformed(evt);
            }
        });

        artsCheckBox.setText("Arts & Entertainment");
        artsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                artsCheckBoxActionPerformed(evt);
            }
        });

        autoCheckBox.setText("Automotive");
        autoCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoCheckBoxActionPerformed(evt);
            }
        });

        carCheckBox.setText("Car Rental");
        carCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carCheckBoxActionPerformed(evt);
            }
        });

        cafesCheckBox.setText("Cafes");
        cafesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cafesCheckBoxActionPerformed(evt);
            }
        });

        beautyCheckBox.setText("Beauty & Spas");
        beautyCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beautyCheckBoxActionPerformed(evt);
            }
        });

        convenienceCheckBox.setText("Convenience Stores");
        convenienceCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convenienceCheckBoxActionPerformed(evt);
            }
        });

        dentistsCheckBox.setText("Dentists");
        dentistsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dentistsCheckBoxActionPerformed(evt);
            }
        });

        doctorsCheckBox.setText("Doctors");
        doctorsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorsCheckBoxActionPerformed(evt);
            }
        });

        drugstoresCheckBox.setText("Drugstores");
        drugstoresCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drugstoresCheckBoxActionPerformed(evt);
            }
        });

        departmentCheckBox.setText("Department Stores");
        departmentCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departmentCheckBoxActionPerformed(evt);
            }
        });

        eduCheckBox.setText("Education");
        eduCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eduCheckBoxActionPerformed(evt);
            }
        });

        eventCheckBox.setText("Event Planning & Services");
        eventCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventCheckBoxActionPerformed(evt);
            }
        });

        flowersCheckBox.setText("Flowers & Gifts");
        flowersCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flowersCheckBoxActionPerformed(evt);
            }
        });

        foodCheckBox.setText("Food");
        foodCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foodCheckBoxActionPerformed(evt);
            }
        });

        healthCheckBox.setText("Health & Medical");
        healthCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                healthCheckBoxActionPerformed(evt);
            }
        });

        homeCheckBox.setText("Home Services");
        homeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeCheckBoxActionPerformed(evt);
            }
        });

        gardenCheckBox.setText("Home & Garden");
        gardenCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gardenCheckBoxActionPerformed(evt);
            }
        });

        hospitalsCheckBox.setText("Hospitals");
        hospitalsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospitalsCheckBoxActionPerformed(evt);
            }
        });

        hotelsCheckBox.setText("Hotels & Travel");
        hotelsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hotelsCheckBoxActionPerformed(evt);
            }
        });

        hardwareCheckBox.setText("Hardware Stores");
        hardwareCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hardwareCheckBoxActionPerformed(evt);
            }
        });

        groceryCheckBox.setText("Grocery");
        groceryCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groceryCheckBoxActionPerformed(evt);
            }
        });

        medicalCheckBox.setText("Medical Centers");
        medicalCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medicalCheckBoxActionPerformed(evt);
            }
        });

        nurseriesCheckBox.setText("Nurseries & Gardening");
        nurseriesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nurseriesCheckBoxActionPerformed(evt);
            }
        });

        nightlifeCheckBox.setText("Nightlife");
        nightlifeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nightlifeCheckBoxActionPerformed(evt);
            }
        });

        restaurantsCheckBox.setText("Restaurants");
        restaurantsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restaurantsCheckBoxActionPerformed(evt);
            }
        });

        shoppingCheckBox.setText("Shopping");
        shoppingCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shoppingCheckBoxActionPerformed(evt);
            }
        });

        transportCheckBox.setText("Transportation");
        transportCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transportCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainCategoriesPanelLayout = new javax.swing.GroupLayout(mainCategoriesPanel);
        mainCategoriesPanel.setLayout(mainCategoriesPanelLayout);
        mainCategoriesPanelLayout.setHorizontalGroup(
            mainCategoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainCategoriesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainCategoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainCategoriesPanelLayout.createSequentialGroup()
                        .addGroup(mainCategoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(homeCheckBox)
                            .addComponent(gardenCheckBox)
                            .addComponent(hospitalsCheckBox)
                            .addComponent(hotelsCheckBox)
                            .addComponent(groceryCheckBox)
                            .addComponent(medicalCheckBox))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(mainCategoriesPanelLayout.createSequentialGroup()
                        .addGroup(mainCategoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(foodCheckBox)
                            .addComponent(departmentCheckBox)
                            .addComponent(eduCheckBox)
                            .addComponent(eventCheckBox)
                            .addComponent(carCheckBox)
                            .addComponent(activeCheckBox)
                            .addComponent(artsCheckBox)
                            .addComponent(autoCheckBox)
                            .addComponent(cafesCheckBox)
                            .addComponent(beautyCheckBox)
                            .addComponent(convenienceCheckBox)
                            .addComponent(dentistsCheckBox)
                            .addComponent(doctorsCheckBox)
                            .addComponent(drugstoresCheckBox)
                            .addComponent(flowersCheckBox)
                            .addComponent(healthCheckBox)
                            .addComponent(nurseriesCheckBox)
                            .addComponent(hardwareCheckBox)
                            .addComponent(nightlifeCheckBox)
                            .addComponent(restaurantsCheckBox)
                            .addComponent(shoppingCheckBox)
                            .addComponent(transportCheckBox))
                        .addGap(0, 154, Short.MAX_VALUE))))
        );
        mainCategoriesPanelLayout.setVerticalGroup(
            mainCategoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainCategoriesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(activeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(artsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(carCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cafesCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(beautyCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(convenienceCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dentistsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(doctorsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(drugstoresCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(departmentCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eduCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eventCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(flowersCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(foodCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(healthCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(homeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gardenCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hospitalsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hotelsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hardwareCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(groceryCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(medicalCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nurseriesCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nightlifeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(restaurantsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(shoppingCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(transportCheckBox)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        mainCategoriesScroll.setViewportView(mainCategoriesPanel);

        businessesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Business", "City", "State", "Stars"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        businessesTable.getTableHeader().setReorderingAllowed(false);
        businessesScrollBar.setViewportView(businessesTable);
        if (businessesTable.getColumnModel().getColumnCount() > 0) {
            businessesTable.getColumnModel().getColumn(2).setPreferredWidth(1);
            businessesTable.getColumnModel().getColumn(3).setPreferredWidth(1);
        }

        subcategoriesPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout subcategoriesPanelLayout = new javax.swing.GroupLayout(subcategoriesPanel);
        subcategoriesPanel.setLayout(subcategoriesPanelLayout);
        subcategoriesPanelLayout.setHorizontalGroup(
            subcategoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 225, Short.MAX_VALUE)
        );
        subcategoriesPanelLayout.setVerticalGroup(
            subcategoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 548, Short.MAX_VALUE)
        );

        subcategoriesScrollBar.setViewportView(subcategoriesPanel);

        javax.swing.GroupLayout attributesPanelLayout = new javax.swing.GroupLayout(attributesPanel);
        attributesPanel.setLayout(attributesPanelLayout);
        attributesPanelLayout.setHorizontalGroup(
            attributesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 225, Short.MAX_VALUE)
        );
        attributesPanelLayout.setVerticalGroup(
            attributesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        attributesScrollBar.setViewportView(attributesPanel);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(daySelection, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dayText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fromTime, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fromText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(toText)
                            .addComponent(toTime, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(mainCategoriesScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(subcategoriesScrollBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(attributeSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(attributeText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 359, Short.MAX_VALUE)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(attributesScrollBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(businessesScrollBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subcategoriesScrollBar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(attributesScrollBar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mainCategoriesScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(businessesScrollBar, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(closeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dayText)
                            .addComponent(fromText)
                            .addComponent(toText)
                            .addComponent(attributeText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(daySelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fromTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(toTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(attributeSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        getContentPane().add(mainPanel);
        mainPanel.setBounds(10, 0, 1150, 618);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void daySelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_daySelectionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_daySelectionActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void drugstoresCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drugstoresCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_drugstoresCheckBoxActionPerformed

    private void activeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activeCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_activeCheckBoxActionPerformed

    private void artsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_artsCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_artsCheckBoxActionPerformed

    private void autoCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_autoCheckBoxActionPerformed

    private void carCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_carCheckBoxActionPerformed

    private void cafesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cafesCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cafesCheckBoxActionPerformed

    private void beautyCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beautyCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_beautyCheckBoxActionPerformed

    private void convenienceCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convenienceCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_convenienceCheckBoxActionPerformed

    private void dentistsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dentistsCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_dentistsCheckBoxActionPerformed

    private void doctorsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorsCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_doctorsCheckBoxActionPerformed

    private void departmentCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departmentCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_departmentCheckBoxActionPerformed

    private void eduCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eduCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_eduCheckBoxActionPerformed

    private void eventCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_eventCheckBoxActionPerformed

    private void flowersCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flowersCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_flowersCheckBoxActionPerformed

    private void foodCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foodCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_foodCheckBoxActionPerformed

    private void healthCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_healthCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_healthCheckBoxActionPerformed

    private void homeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_homeCheckBoxActionPerformed

    private void gardenCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gardenCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_gardenCheckBoxActionPerformed

    private void hospitalsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospitalsCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_hospitalsCheckBoxActionPerformed

    private void hotelsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hotelsCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_hotelsCheckBoxActionPerformed

    private void hardwareCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hardwareCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_hardwareCheckBoxActionPerformed

    private void groceryCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groceryCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_groceryCheckBoxActionPerformed

    private void medicalCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medicalCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_medicalCheckBoxActionPerformed

    private void nurseriesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nurseriesCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_nurseriesCheckBoxActionPerformed

    private void nightlifeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nightlifeCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_nightlifeCheckBoxActionPerformed

    private void restaurantsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restaurantsCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_restaurantsCheckBoxActionPerformed

    private void shoppingCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shoppingCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_shoppingCheckBoxActionPerformed

    private void transportCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transportCheckBoxActionPerformed
        try {
            checkMainCategories();
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_transportCheckBoxActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String day, from, to;
        
        if(daySelection.getSelectedIndex() == 0) {
            day = null;
        }
        else {
            day = (String) daySelection.getItemAt(daySelection.getSelectedIndex());
        }
        if(fromTime.getSelectedIndex() == 0) {
            from = null;
        }
        else {
            from = (String) fromTime.getItemAt(fromTime.getSelectedIndex());
        }
        if(toTime.getSelectedIndex() == 0) {
            to = null;
        }
        else {
            to = (String) toTime.getItemAt(toTime.getSelectedIndex());
        }
        
        ArrayList<String> sc = getCategories(subcategoriesPanel);
        ArrayList<String> att = getCategories(attributesPanel);
        
        try {
            queryBusinesses(sc, att, day, from ,to);
        } catch (SQLException ex) {
            Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
        }      
    }//GEN-LAST:event_searchButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(hw3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new hw3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox activeCheckBox;
    private javax.swing.JCheckBox artsCheckBox;
    private javax.swing.JComboBox attributeSelection;
    private javax.swing.JLabel attributeText;
    private javax.swing.JPanel attributesPanel;
    private javax.swing.JScrollPane attributesScrollBar;
    private javax.swing.JCheckBox autoCheckBox;
    private javax.swing.JCheckBox beautyCheckBox;
    private javax.swing.JScrollPane businessesScrollBar;
    private javax.swing.JTable businessesTable;
    private javax.swing.JCheckBox cafesCheckBox;
    private javax.swing.JCheckBox carCheckBox;
    private javax.swing.JButton closeButton;
    private javax.swing.JCheckBox convenienceCheckBox;
    private javax.swing.JComboBox daySelection;
    private javax.swing.JLabel dayText;
    private javax.swing.JCheckBox dentistsCheckBox;
    private javax.swing.JCheckBox departmentCheckBox;
    private javax.swing.JCheckBox doctorsCheckBox;
    private javax.swing.JCheckBox drugstoresCheckBox;
    private javax.swing.JCheckBox eduCheckBox;
    private javax.swing.JCheckBox eventCheckBox;
    private javax.swing.JCheckBox flowersCheckBox;
    private javax.swing.JCheckBox foodCheckBox;
    private javax.swing.JLabel fromText;
    private javax.swing.JComboBox fromTime;
    private javax.swing.JCheckBox gardenCheckBox;
    private javax.swing.JCheckBox groceryCheckBox;
    private javax.swing.JCheckBox hardwareCheckBox;
    private javax.swing.JCheckBox healthCheckBox;
    private javax.swing.JCheckBox homeCheckBox;
    private javax.swing.JCheckBox hospitalsCheckBox;
    private javax.swing.JCheckBox hotelsCheckBox;
    private javax.swing.JPanel mainCategoriesPanel;
    private javax.swing.JScrollPane mainCategoriesScroll;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JCheckBox medicalCheckBox;
    private javax.swing.JCheckBox nightlifeCheckBox;
    private javax.swing.JCheckBox nurseriesCheckBox;
    private javax.swing.JCheckBox restaurantsCheckBox;
    private javax.swing.JButton searchButton;
    private javax.swing.JCheckBox shoppingCheckBox;
    private javax.swing.JPanel subcategoriesPanel;
    private javax.swing.JScrollPane subcategoriesScrollBar;
    private javax.swing.JLabel toText;
    private javax.swing.JComboBox toTime;
    private javax.swing.JCheckBox transportCheckBox;
    // End of variables declaration//GEN-END:variables

    private Connection getConnection() throws SQLException {
        DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());
        Connection conn = DriverManager.getConnection("jdbc:oracle:thin:@//localhost:1521/orclg", "scott", "tiger");
        
        return conn;
    }
    
    private void checkMainCategories() throws SQLException {
        ArrayList<String> list = getCategories(mainCategoriesPanel);
        removeComponents(subcategoriesPanel, subcategoriesScrollBar);
        removeComponents(attributesPanel, attributesScrollBar);

        if(list.size() > 0) {
            ArrayList<String> nestsqlList = new ArrayList<String>();
            
            for(int i = 0; i < list.size(); i++) {
                nestsqlList.add("SELECT DISTINCT BC.businessid FROM BusinessCategory BC WHERE BC.Category = '" + list.get(i) + "'");
            }
            
            String nestsql = nestsqlList.get(0);
            for(int i = 1; i < nestsqlList.size(); i++) {
                nestsql += " INTERSECT " + nestsqlList.get(i);
            }
            String sql = "SELECT DISTINCT B.category FROM BusinessCategory B, (" + nestsql + ") B2 WHERE B.businessid = B2.businessid ORDER BY B.category ASC";
            querySubCategories(sql);
        }
    }

    private void querySubCategories(String sql) throws SQLException {
        Connection conn = this.getConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(sql);
        subcategoriesPanel.setLayout(new GridLayout(rs.getRow(),1));
        
        while(rs.next()) {
            JCheckBox jcb = new JCheckBox(rs.getString(1));
            jcb.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        checkSubcategories();
                    } catch (SQLException ex) {
                        Logger.getLogger(hw3.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });
            subcategoriesPanel.add(jcb);
            subcategoriesScrollBar.updateUI();
        }
    }
    
    private void checkSubcategories() throws SQLException{
        ArrayList<String> list = getCategories(subcategoriesPanel);       
        removeComponents(attributesPanel, attributesScrollBar);
        
        if(list.size() > 0) {
            ArrayList<String> nestsqlList = new ArrayList<String>();
            
            for(int i = 0; i < list.size(); i++) {
                nestsqlList.add("SELECT DISTINCT BC.businessid FROM BusinessCategory BC WHERE BC.Category = '" + list.get(i) + "'");
            }
            
            String nestsql = nestsqlList.get(0);
            for(int i = 1; i < nestsqlList.size(); i++) {
                nestsql += " UNION " + nestsqlList.get(i);
            }
            String sql = "SELECT DISTINCT B.attribute, B.bool FROM BusinessAttributes B, (" + nestsql + ") B2 WHERE B.businessid = B2.businessid ORDER BY B.attribute ASC";
            queryAttributes(sql);
        }
    }

    private void queryAttributes(String sql) throws SQLException {
        Connection conn = this.getConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(sql);
        attributesPanel.setLayout(new GridLayout(rs.getRow(),1));
        
        while(rs.next()) {
            JCheckBox jcb = new JCheckBox(rs.getString(1) + ":" + rs.getString(2));
            attributesPanel.add(jcb);
            attributesScrollBar.updateUI();
        }
    }

    private ArrayList<String> getCategories(JPanel panel) {
        ArrayList<String> list = new ArrayList<String>();        
       
        for(Component comp : panel.getComponents()) {
            if(comp instanceof javax.swing.JCheckBox) {
                JCheckBox cb = (JCheckBox) comp;
                if(cb.isSelected()) {
                    list.add(cb.getText());
                }
            }
        }
        
        return list;
    }
    
    private void removeComponents(JPanel panel, JScrollPane spanel) {
        if(panel.getComponents().length > 0) {
            for(Component comp : panel.getComponents()) {
                if(comp instanceof JCheckBox) {
                    panel.remove(comp);
                }
            }
            spanel.updateUI();
        }
    }
    
    private void queryBusinesses(ArrayList<String> sc, ArrayList<String> att, String day, String from, String to) throws SQLException {
        String scsql = null, attsql = null, hoursql = null;
        
        if(sc.size() > 0) {
            scsql = "SELECT DISTINCT BC.businessid FROM BusinessCategory BC WHERE BC.Category = '" 
                    + sc.get(0) + "'";
            
            if(sc.size() > 1) {
                for(int i = 1; i < sc.size(); i++) {
                    scsql += " UNION SELECT DISTINCT BC.businessid FROM BusinessCategory BC WHERE BC.Category = '" 
                            + sc.get(i) + "'";
                }
            }
        }
        if(att.size() > 0) {
            String[] splitAtt = att.get(0).split(":");
            attsql = "SELECT DISTINCT BA.businessid FROM BusinessAttributes BA WHERE BA.attribute = '" 
                    + splitAtt[0] + "' AND BA.bool = '" + splitAtt[1] + "'";
            
            if(att.size() > 1) {
                int condition = attributeSelection.getSelectedIndex();
                
                for(int i = 1; i < sc.size(); i++) {
                   splitAtt = att.get(i).split(":");
                   if(condition == 0) {
                       attsql += " INTERSECT ";
                   }
                   else {
                       attsql += " UNION ";
                   }
                   attsql += "SELECT DISTINCT BA.businessid FROM BusinessAttributes BA WHERE BA.attribute = '"
                               + splitAtt[0] + "' AND BA.bool = '" + splitAtt[1] + "'";
                }
            }
        }
        
        hoursql = "SELECT DISTINCT BH.businessid FROM BusinessHours BH WHERE ";
        
        if(day != null) {
            hoursql += "BH.businessDay = '" + day + "'";
            if(from != null) {
                hoursql += " AND BH.bopen < '" + from + "'";
            }
        }
        else {
            if(from != null) {
                hoursql += "BH.bopen < '" + from + "'";
            }
        }
        
        String sql = "SELECT DISTINCT B.name, B.city, B.bstate, B.rating FROM Businesses B, (" + scsql 
                + ") B2, (" + hoursql + ") B3, (" + attsql 
                + ") B4 WHERE B.businessid = B2.businessid AND B.businessid = B3.businessid AND B.businessid = B4.businessid ORDER BY B.name";
        Connection conn = getConnection();
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(sql);
        DefaultTableModel table = (DefaultTableModel) businessesTable.getModel();
        
        while(rs.next()) {
            table.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getDouble(4)});
        }
    }
}
